package main

import (
	"6502profiler/acmeassembler"
	"6502profiler/cpu"
	"6502profiler/memory"
	"6502profiler/profiler"
	"6502profiler/util"
	"flag"
	"fmt"
	"os"
)

func ProfileCommand(arguments []string) error {
	const strategyMedian = "median"

	profileFlags := flag.NewFlagSet("6502profiler profile", flag.ContinueOnError)
	binaryFileName := profileFlags.String("prg", "", "Path to the program to run")
	labelFileName := profileFlags.String("label", "", "Path to the label file generated by the ACME assembler")
	outputFileName := profileFlags.String("out", "", "Path to the out file that holds the generated data")
	percentageCutOff := profileFlags.Uint("prcnt", 10, "Percentage used to determine cut off value")
	strategy := profileFlags.String("strategy", strategyMedian, "Strategy to determine cutoff value")

	cpu := cpu.New6502(cpu.Model6502)
	// mem := memory.NewMemWrapper(memory.NewLinearMemory(16384), 0x2D00)
	// picProc := memory.NewPicProcessor(320, 200)
	// mem.AddSpecialWriteAddress(0x2DDD, picProc.SetPoint)
	mem := memory.NewLinearMemory(65536)
	var p float64

	cpu.Init(mem)

	err := profileFlags.Parse(arguments)
	if err != nil {
		os.Exit(util.ExitErrorSyntax)
	}

	if *binaryFileName == "" {
		return fmt.Errorf("no program specified")
	}

	if *outputFileName != "" {
		if *labelFileName == "" {
			return fmt.Errorf("a label file has to be specified")
		}

		if *percentageCutOff > 100 {
			return fmt.Errorf("%d is not a valid value for cutoff percentage", *percentageCutOff)
		}

		p = float64(*percentageCutOff) / 100.0
	}

	res := cpu.LoadAndRun(*binaryFileName)
	if res != nil {
		return fmt.Errorf("a problem occurred: %v", res)
	}

	fmt.Printf("Program ran for %d clock cycles\n", cpu.NumCycles())

	if *outputFileName != "" {
		labels, err := acmeassembler.ParseLabelFile(*labelFileName)
		if err != nil {
			return fmt.Errorf("a problem occurred: %v", err)
		}

		ctOff := func(m memory.Memory, start, end uint16) uint64 {
			if *strategy != strategyMedian {
				return profiler.CutOffAbsoluteValue(m, start, end, p)
			} else {
				return profiler.CutOffMedian(m, start, end, p)
			}
		}

		profiler.DumpStatistics(mem, *outputFileName, labels, 2048, 2048+2048, ctOff)
	}

	// picProc.Save("apfel.png")

	return nil
}

func main() {
	subcommParser := util.NewSubcommandParser()

	subcommParser.AddCommand("profile", ProfileCommand, "Generate data about program executions")
	subcommParser.Execute()
}
